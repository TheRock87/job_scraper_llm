# ü§ñ AI Job Filtering with Mistral-7B

This notebook loads job listings from Google Drive, classifies them using the Mistral-7B model from HuggingFace, and outputs a beautiful, interactive HTML table of junior AI jobs.

---

## üöÄ Setup and Dependencies
```python
# Install required packages
!pip install -q transformers accelerate torch pandas tqdm
```

---

## ‚òÅÔ∏è Mount Google Drive
```python
from google.colab import drive
drive.mount('/content/drive')

DRIVE_PATH = '/content/drive/MyDrive/AI-Jobs'
INPUT_FILE = 'jobs_raw.csv'
OUTPUT_FILE = 'filtered_jobs.html'

print(f"üìÅ Drive mounted at: {DRIVE_PATH}")
```

---

## üìä Load Job Data
```python
import pandas as pd
import os

input_path = f"{DRIVE_PATH}/{INPUT_FILE}"
if not os.path.exists(input_path):
    raise FileNotFoundError(f"File not found: {input_path}")
df = pd.read_csv(input_path)
print(f"‚úÖ Loaded {len(df)} jobs from {input_path}")
df.head()
```

---

## ü§ñ Load Mistral-7B Model
```python
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import torch

model_name = "mistralai/Mistral-7B-Instruct-v0.2"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16,
    device_map="auto",
    load_in_8bit=True
)
print("‚úÖ Model loaded!")
```

---

## üìù Prepare Prompt
```python
PROMPT_TEMPLATE = '''You are a job relevance filter AI. Check if the following job is relevant to the search: {search_term} and not for seniors.
Title: {title}
Company: {company}
Location: {location}
Description: {description}
Is this job related? Respond with only 'yes' or 'no'.'''

SEARCH_TERMS = '"Ai engineer" OR "Machine learning engineer" OR "Data scientist"'
```

---

## üîç Classify Jobs
```python
from tqdm.notebook import tqdm

def classify_job(row):
    prompt = PROMPT_TEMPLATE.format(
        search_term=SEARCH_TERMS,
        title=row.get('title', ''),
        company=row.get('company', ''),
        location=row.get('location', ''),
        description=str(row.get('description', ''))[:2000]
    )
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=2048).to(model.device)
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_new_tokens=10,
            temperature=0.1,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True).lower()
    if 'yes' in response:
        return 'Yes'
    elif 'no' in response:
        return 'No'
    else:
        return 'Uncertain'

df['Is_Junior_AI_Job'] = [classify_job(row) for _, row in tqdm(df.iterrows(), total=len(df))]
```

---

## üåê Create Interactive HTML Table
```python
def create_html_table(df):
    relevant = df[df['Is_Junior_AI_Job'] == 'Yes'].copy()
    if relevant.empty:
        return '<h2>No relevant jobs found.</h2>'
    html = ['''<!DOCTYPE html><html><head><meta charset="utf-8"><title>Filtered AI Jobs</title>
    <style>body{font-family:sans-serif;}table{border-collapse:collapse;width:100%;}th,td{border:1px solid #ddd;padding:8px;}th{background:#667eea;color:#fff;cursor:pointer;}tr:nth-child(even){background:#f2f2f2;}a{color:#667eea;}</style>
    <script>function sortTable(n){var t=document.getElementById('jobTable'),r=true,s,i,o,f,c=0;while(r){r=false;s=t.rows;for(i=1;i<s.length-1;i++){o=false;f=s[i].getElementsByTagName('TD')[n];c=s[i+1].getElementsByTagName('TD')[n];if(f.innerHTML.toLowerCase()>c.innerHTML.toLowerCase()){o=true;break;}}if(o){s[i].parentNode.insertBefore(s[i+1],s[i]);r=true;}}}</script>
    </head><body><h2>Filtered AI Jobs</h2><table id="jobTable"><thead><tr><th onclick="sortTable(0)">Title</th><th onclick="sortTable(1)">Company</th><th onclick="sortTable(2)">Location</th><th>Description</th></tr></thead><tbody>"]
    for _, row in relevant.iterrows():
        html.append(f'<tr><td><a href="{row.get("job_url", "#")}" target="_blank">{row.get("title", "")}</a></td><td>{row.get("company", "")}</td><td>{row.get("location", "")}</td><td>{str(row.get("description", ""))[:200]}</td></tr>')
    html.append('</tbody></table></body></html>')
    return ''.join(html)

html_content = create_html_table(df)
output_path = f"{DRIVE_PATH}/{OUTPUT_FILE}"
with open(output_path, 'w', encoding='utf-8') as f:
    f.write(html_content)
print(f"‚úÖ HTML file saved to: {output_path}")
```

---

## üì• Download Results
```python
from google.colab import files
files.download(output_path)
print("üéâ Done! You can also find the file in your Google Drive AI-Jobs folder.")
``` 